/*
 * copyright Ammar Bin Ameerdeen
 * All rights reserved
 */
package printare_system;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 *
 * @author Ammar Bin Ameerdeen
 */
public class Notifications extends javax.swing.JPanel {
    Point nextItemLocation;
    IMSFrame frame;
    boolean showing= false;
    
    /**
     * Creates new form Notifications
     */
    public Notifications(IMSFrame frame) {
        nextItemLocation = new Point(20,20);
        this.frame = frame ;
        
        
        initComponents();
        updateDatabaseTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        number = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        number.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        number.setText("N");
        number.setName("number"); // NOI18N
        number.setVisible(false);
        add(number, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    public void addNotificationItem(String  title, String text, IMSFrame frame, int id){
        NotificationItem notificationItem = new NotificationItem (frame,id);
        notificationItem.setName("name");
        notificationItem.setVisible(true);
        notificationItem.title.setText(title);
        notificationItem.text.setText(text);
        notificationItem.setSize(Theme.NOTIFICATION_ITEM_SIZE_DEFAULT);
        
        add(notificationItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(nextItemLocation));
        
        nextItemLocation= new Point((int) nextItemLocation.getX(), (int) (nextItemLocation.getY()+10+Theme.NOTIFICATION_ITEM_SIZE_DEFAULT.getHeight()));
        revalidate();
    }
    
    
    public int getNumberOfNotifications(){
        int number = 0 ;
        try {
            String query = "SELECT count(`id`) FROM `notification` WHERE `notified`= 0";
            ResultSet rs = frame.database.statement.executeQuery(query);
            rs.next();
            number = rs.getInt("count(`id`)");
        } catch (SQLException ex) {
            Logger.getLogger(Notifications.class.getName()).log(Level.SEVERE, null, ex);
        }
        return number ;
    }
    
    public void updateDatabaseTable(){
        try {
            // delete all the temporary notifications
            String update ="DELETE FROM `notification` WHERE `notified`='1'";
            frame.database.statement.executeUpdate(update);
            
            String notification[][] = new String[50][2];
            String query = "SELECT `name`,`stock`,`minimum_stock` FROM `product`";
            ResultSet rs = frame.database.statement.executeQuery(query) ;
            int i =-1;
            while(rs.next()){
                if (rs.getInt("stock") < rs.getInt("minimum_stock")){
                    i++;
                    notification[i][0] =rs.getString("name");
                    notification[i][1] = rs.getString("stock");
                }
            }
            
            while(i>=0){
                update = "INSERT INTO `notification` (`title`,`text`) VALUES ('"+"Critical stock - "+notification[i][0]+"','"+"You have only "+notification[i][1]+" number of "+notification[i][0]+"(s)')";
                frame.database.statement.executeUpdate(update);
                i--;
            }
        } catch (SQLException ex) {
            Logger.getLogger(Notifications.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        
        
    }
    
    // flushes temporary notifications
        public static void flushNotifications() {
        try {
            String update = "DELETE FROM `notification` WHERE `temporary`='1'";
            Database database = new Database();
            database.connect();
            database.statement.executeUpdate(update);
        } catch (SQLException ex) {
            Logger.getLogger(Notifications.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    NotificationItem notificationItem;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel number;
    // End of variables declaration//GEN-END:variables
}
