/*
 * copyright Ammar Bin Ameerdeen
 * All rights reserved
 */
package printare_system;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ammar Bin Ameerdeen
 */
public class PrintOrderHistory extends IMSFrame {
    
    IMSFrame main ;
    /**
     * Creates new form Template_printare
     */
    public PrintOrderHistory(IMSFrame parent, boolean modal) {
        super();
        database = new Database();
        database.connect();
        main = parent ;
        initComponents();
        Theme theme = new Theme();
        theme.setTheme(this);
         this.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        super.windowClosing(e);
                        main.setVisible(true);                        
                        dispose();
                    }
                });
         
         // whatever code must come after this
         
         updateOrderHistoryTable();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = getBackgroundPanel();
        title = getFrameTitle();
        centerPanel = getCenterPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderHistory = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jobs = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        materials = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        backgroundPanel.setBackground(Theme.BACKGROUND_COLOR);
        backgroundPanel.setName("backgroundPanel"); // NOI18N
        backgroundPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        title.setBackground(Theme.TITLE_FONT_COLOR);
        title.setText("Printing order History");
        title.setFont(new java.awt.Font("Ubuntu", 1, 36)); // NOI18N
        title.setName("title"); // NOI18N
        backgroundPanel.add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, -1, -1));

        centerPanel.setBackground(new java.awt.Color(236, 198, 161));
        centerPanel.setName("centerPanel"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        orderHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Order Date", "Due Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderHistory.setName("orderHistory"); // NOI18N
        orderHistory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderHistoryMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(orderHistory);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jobs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Job Id", "Width", "Height", "Price"
            }
        ));
        jobs.setName("jobs"); // NOI18N
        jobs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jobsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jobs);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        materials.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Material Name", "Quantity"
            }
        ));
        materials.setName("materials"); // NOI18N
        jScrollPane3.setViewportView(materials);

        org.jdesktop.layout.GroupLayout centerPanelLayout = new org.jdesktop.layout.GroupLayout(centerPanel);
        centerPanel.setLayout(centerPanelLayout);
        centerPanelLayout.setHorizontalGroup(
            centerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(centerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 433, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(centerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(centerPanelLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 21, Short.MAX_VALUE)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 419, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(45, 45, 45))
                    .add(centerPanelLayout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 419, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        centerPanelLayout.setVerticalGroup(
            centerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(centerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(centerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(centerPanelLayout.createSequentialGroup()
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 216, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 172, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        backgroundPanel.add(centerPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 930, 460));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backgroundPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 969, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(backgroundPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 589, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void orderHistoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderHistoryMouseClicked
        // update the jobs table
        String Sid =(String) orderHistory.getValueAt(orderHistory.getSelectedRow(), 0);
        int id = Integer.parseInt(Sid);
       updateJobsTable(id);
       
       // reset the materials table
        DefaultTableModel tableModel = new DefaultTableModel();
        
        tableModel.addColumn("Material Name");
        tableModel.addColumn("Quantity");
        tableModel.setNumRows(0);

        materials.setModel(tableModel);

    }//GEN-LAST:event_orderHistoryMouseClicked

    private void jobsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jobsMouseClicked
        // update materials  table
        String Sid =(String) jobs.getValueAt(jobs.getSelectedRow(), 0);
        int id = Integer.parseInt(Sid);
        updateMaterialsTable(id);
    }//GEN-LAST:event_jobsMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrintOrderHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrintOrderHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrintOrderHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrintOrderHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PrintOrderHistory dialog = new PrintOrderHistory(new IMSFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

   
    public void updateOrderHistoryTable(){
        try {
        DefaultTableModel tableModel = new DefaultTableModel();
        
        String query = "SELECT `ordered_date`,`id`,`due_date` FROM `order`";
        ResultSet rs = database.statement.executeQuery(query);

        tableModel.addColumn("Order ID");
        tableModel.addColumn("Ordered Date");
        tableModel.addColumn("Due Date");

        while(rs.next()){
        // add row by row
        Vector projectDetails = new Vector();

        projectDetails.add(rs.getString("id"));
        projectDetails.add(rs.getString("ordered_date"));
        projectDetails.add(rs.getString("due_date"));
        
        tableModel.addRow(projectDetails);

        }

                
        orderHistory.setModel(tableModel);

        } catch (SQLException e){
            e.printStackTrace();
        }
        
        
    }
    
    public void updateJobsTable(int id){
        try {
        DefaultTableModel tableModel = new DefaultTableModel();
        
        String query = "SELECT `id`,`width`,`height`,`price` FROM `print_order` WHERE `id`='"+id+"'";
        ResultSet rs = database.statement.executeQuery(query);

        tableModel.addColumn("Job ID");
        tableModel.addColumn("Width");
        tableModel.addColumn("Height");
        tableModel.addColumn("Price");

        while(rs.next()){
        // add row by row
        Vector projectDetails = new Vector();

        projectDetails.add(rs.getString("id"));
        projectDetails.add(rs.getString("width"));
        projectDetails.add(rs.getString("height"));
        projectDetails.add(rs.getString("price"));
        
        tableModel.addRow(projectDetails);

        }

        jobs.setModel(tableModel);

        } catch (SQLException e){
            e.printStackTrace();
        }
    }
    
    public void updateMaterialsTable(int id){
        try {
        DefaultTableModel tableModel = new DefaultTableModel();
        
        String query = "SELECT `material_name`,`quantity` FROM `material_print` WHERE `print_order_id`='"+id+"'";
        
        ResultSet rs = database.statement.executeQuery(query);

        tableModel.addColumn("Material Name");
        tableModel.addColumn("Quantity");

        while(rs.next()){
        // add row by row
        Vector projectDetails = new Vector();

        projectDetails.add(rs.getString("material_name"));
        projectDetails.add(rs.getString("quantity"));
        
        tableModel.addRow(projectDetails);

        }

        materials.setModel(tableModel);

        } catch (SQLException e){
            e.printStackTrace();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public org.jdesktop.swingx.JXPanel backgroundPanel;
    public javax.swing.JPanel centerPanel;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JScrollPane jScrollPane3;
    public javax.swing.JTable jobs;
    public javax.swing.JTable materials;
    public javax.swing.JTable orderHistory;
    public org.jdesktop.swingx.JXLabel title;
    // End of variables declaration//GEN-END:variables
}
