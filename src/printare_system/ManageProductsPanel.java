/*
 * copyright Ammar Bin Ameerdeen
 * All rights reserved
 */
package printare_system;

import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.*;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
/**
 *
 * @author Ammar Bin Ameerdeen
 */
public class ManageProductsPanel extends ContentPanel {
    Common common ;
    Database database ;
    boolean update;
    /**
     * Creates new form ManageProductsPanel
     */
    public ManageProductsPanel() {
        initComponents();
        common = new Common();
        update = false ;
        database = new Database();
        database.connect();

        category.setModel(common.getComboBoxModel("product_category", "name")) ;
        subCategory.setModel(common.getComboBoxModel("sub_category", "name"));
        brand.setModel(common.getComboBoxModel("brand","name"));
        unit.setModel(common.getComboBoxModel("unit", "name"));
        status.setModel(common.getComboBoxModel("status", "name"));
        updateProductTable();
        // set autocomplete feature
        AutoCompleteDecorator.decorate(brand);
        AutoCompleteDecorator.decorate(category);
        AutoCompleteDecorator.decorate(subCategory);
        AutoCompleteDecorator.decorate(unit);
        AutoCompleteDecorator.decorate(status);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        productName = new javax.swing.JTextField();
        jXLabel2 = new org.jdesktop.swingx.JXLabel();
        jLabel1 = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        productAction = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        category = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        description = new javax.swing.JTextArea();
        jXLabel3 = new org.jdesktop.swingx.JXLabel();
        jLabel3 = new javax.swing.JLabel();
        minimumStock = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        subCategory = new javax.swing.JComboBox();
        brand = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        unit = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        barcode = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        shortDescription = new javax.swing.JTextArea();
        jXLabel4 = new org.jdesktop.swingx.JXLabel();
        status = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        createUnit = new javax.swing.JButton();
        createSubCategory = new javax.swing.JButton();
        createCategory = new javax.swing.JButton();
        createBrand = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new org.jdesktop.swingx.JXTable();
        editMode = new javax.swing.JCheckBox();
        deductWaste = new javax.swing.JButton();

        setBackground(Theme.CENTER_BOX_COLOR);
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), "Product Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        productName.setName("productName"); // NOI18N
        jPanel1.add(productName, new org.netbeans.lib.awtextra.AbsoluteConstraints(228, 13, 139, -1));

        jXLabel2.setText("Product Name");
        jXLabel2.setName("jXLabel2"); // NOI18N
        jPanel1.add(jXLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 18, -1, -1));

        jLabel1.setText("Price");
        jLabel1.setName("jLabel1"); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 51, -1, -1));

        price.setName("price"); // NOI18N
        price.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                priceFocusLost(evt);
            }
        });
        jPanel1.add(price, new org.netbeans.lib.awtextra.AbsoluteConstraints(228, 46, 139, -1));

        productAction.setBackground(Theme.BUTTON_COLOR);
        productAction.setText("Add >>");
        productAction.setName("productAction"); // NOI18N
        productAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productActionActionPerformed(evt);
            }
        });
        jPanel1.add(productAction, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 380, 179, 58));

        jLabel2.setText("Category");
        jLabel2.setName("jLabel2"); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 79, -1, -1));

        category.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Database Error" }));
        category.setName("category"); // NOI18N
        jPanel1.add(category, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 79, -1, -1));

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        description.setColumns(20);
        description.setRows(5);
        description.setName("description"); // NOI18N
        jScrollPane2.setViewportView(description);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 360, -1, -1));

        jXLabel3.setText("Description");
        jXLabel3.setName("jXLabel3"); // NOI18N
        jPanel1.add(jXLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, -1, -1));

        jLabel3.setText("Minimum stock");
        jLabel3.setName("jLabel3"); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 202, -1, -1));

        minimumStock.setName("minimumStock"); // NOI18N
        jPanel1.add(minimumStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(236, 202, 131, -1));

        jLabel4.setText("Sub Category");
        jLabel4.setName("jLabel4"); // NOI18N
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 124, -1, -1));

        subCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Database Error" }));
        subCategory.setName("subCategory"); // NOI18N
        jPanel1.add(subCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 124, -1, -1));

        brand.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Database Error" }));
        brand.setName("brand"); // NOI18N
        jPanel1.add(brand, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 169, -1, -1));

        jLabel5.setText("Brand ");
        jLabel5.setName("jLabel5"); // NOI18N
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 174, -1, -1));

        unit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Database Error" }));
        unit.setName("unit"); // NOI18N
        jPanel1.add(unit, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 240, -1, -1));

        jLabel6.setText("Unit");
        jLabel6.setName("jLabel6"); // NOI18N
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 246, -1, -1));

        jLabel7.setText("Barcode");
        jLabel7.setName("jLabel7"); // NOI18N
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, -1, -1));

        barcode.setName("barcode"); // NOI18N
        jPanel1.add(barcode, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 290, 131, -1));

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        shortDescription.setColumns(20);
        shortDescription.setRows(5);
        shortDescription.setName("shortDescription"); // NOI18N
        jScrollPane3.setViewportView(shortDescription);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 10, -1, -1));

        jXLabel4.setText("Short Description");
        jXLabel4.setName("jXLabel4"); // NOI18N
        jPanel1.add(jXLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 20, -1, -1));

        status.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Database Error" }));
        status.setName("status"); // NOI18N
        jPanel1.add(status, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 120, -1, -1));

        jLabel8.setText("Status");
        jLabel8.setName("jLabel8"); // NOI18N
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 130, -1, -1));

        createUnit.setText("Edit");
        createUnit.setName("createUnit"); // NOI18N
        createUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUnitActionPerformed(evt);
            }
        });
        jPanel1.add(createUnit, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 240, -1, -1));

        createSubCategory.setText("Edit");
        createSubCategory.setName("createSubCategory"); // NOI18N
        createSubCategory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createSubCategoryMouseClicked(evt);
            }
        });
        jPanel1.add(createSubCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 130, -1, -1));

        createCategory.setText("Edit");
        createCategory.setName("createCategory"); // NOI18N
        createCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCategoryActionPerformed(evt);
            }
        });
        jPanel1.add(createCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 80, -1, -1));

        createBrand.setText("Edit");
        createBrand.setName("createBrand"); // NOI18N
        createBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBrandActionPerformed(evt);
            }
        });
        jPanel1.add(createBrand, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 170, -1, 30));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 800, 480));

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Price", "Category", "Description", "Stock", "Min.Stock"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        productTable.setName("productTable"); // NOI18N
        productTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(productTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 40, 480, -1));

        editMode.setForeground(Theme.FONT_COLOR);
        editMode.setText("Edit mode enabled");
        editMode.setName("editMode"); // NOI18N
        editMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editModeActionPerformed(evt);
            }
        });
        add(editMode, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 10, -1, -1));

        deductWaste.setText("Deduct Waste");
        deductWaste.setName("deductWaste"); // NOI18N
        deductWaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deductWasteActionPerformed(evt);
            }
        });
        add(deductWaste, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 460, 170, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void productActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productActionActionPerformed
        if (!validateInput()){
            return ;
        }
        if (update){
            editProduct();
        }
        else{
            addProduct();
        }

    }//GEN-LAST:event_productActionActionPerformed

    private void productTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productTableMouseClicked
        try {
            if (!update){
                return ;
            }
            int row = productTable.getSelectedRow();
            String name = (String) productTable.getValueAt(row, 0);
            // get all the values from the database
            String query = "SELECT * FROM `product` WHERE `name`='"+name+"'";
            ResultSet rs = database.statement.executeQuery(query);
            while(rs.next()){
                
            productName.setText(name);
            price.setText(rs.getString("price"));
            category.setSelectedItem(rs.getString("product_category_name"));
            description.setText(rs.getString("description"));
            minimumStock.setText(rs.getString("minimum_stock"));
            shortDescription.setText(rs.getString("short_description"));
            subCategory.setSelectedItem(rs.getString("sub_category_name"));
            unit.setSelectedItem(rs.getString("sub_category_name"));
            brand.setSelectedItem(rs.getString("brand_name"));
            barcode.setText(rs.getString("barcode"));
            status.setSelectedItem(rs.getString("status_name"));
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(ManageProductsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_productTableMouseClicked

    private void editModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editModeActionPerformed
        //
        // activate the update mode
        if (editMode.isSelected()){
            update = true;
            // change the addButton
            productAction.setBackground(Color.orange);
            productAction.setText("Update Product");
            productName.setEnabled(false);
        }else{
            update = false ;
            // change the action Button
            productAction.setBackground(new Color(127,175,126));
            productAction.setText("Add Product");
            productName.setEnabled(true);
        }

    }//GEN-LAST:event_editModeActionPerformed

    private void priceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_priceFocusLost
        ValidateOut vOut = new ValidateOut();
        vOut.validateFloatTextBox((JTextField) evt.getComponent());
    }//GEN-LAST:event_priceFocusLost

    private void createCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCategoryActionPerformed
        // popup a small window to create new category
            goToManageCategoriesAndBrands();
    }//GEN-LAST:event_createCategoryActionPerformed

    private void createSubCategoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createSubCategoryMouseClicked
                    goToManageCategoriesAndBrands();
    }//GEN-LAST:event_createSubCategoryMouseClicked

    private void createBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBrandActionPerformed
            goToManageCategoriesAndBrands();
    }//GEN-LAST:event_createBrandActionPerformed

    private void createUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUnitActionPerformed
            goToManageCategoriesAndBrands();
    }//GEN-LAST:event_createUnitActionPerformed

    private void deductWasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deductWasteActionPerformed
        // TODO add your handling code here:
        WastedStock wasteStock = new WastedStock(true, ((String) productTable.getValueAt(productTable.getSelectedRow(), 0)));
        wasteStock.setVisible(true);
    }//GEN-LAST:event_deductWasteActionPerformed


     
     public boolean validateInput(){
        ValidateOut vOut= new ValidateOut();
        vOut.validateFloatTextBox(price);
        return vOut.valid;
    }
     
      private void editProduct(){
           try {
               if(!update){
                   return;
               }
               
               String name = productName.getText();
               String newPrice = price.getText();
               String newCategory = (String) category.getSelectedItem();
               String newDescription = description.getText();
               
               // update the database table
               
               String update = "UPDATE `product` SET `price`='"+newPrice+"', `description`='"+newDescription+"' , `product_category_name`='"+newCategory+"',`minimum_stock`='"+minimumStock.getText()+"' WHERE `name`='"+name+"'" ;
               database.statement.executeUpdate(update);
               
               // update UI
                updateProductTable();
               // update the site
                HttpConnection hConnection = new HttpConnection();
        //select id numbers
        String brandI = hConnection.sendGet("http://localhost/e-commerce/Back_end/max_karty_back_end/interface/CRUD.php", "?action=select&&column=brand_id&&table=brands&&where=(`brand`='"+((String) brand.getSelectedItem())+"')");
        String categoryI = hConnection.sendGet("http://localhost/e-commerce/Back_end/max_karty_back_end/interface/CRUD.php", "?action=select&&column=cat_id&&table=category&&where=(`cat_name`='"+((String) category.getSelectedItem())+"')");
        int statusId;
        if (((String) status.getSelectedItem()).equals("disable")){
            statusId = 0;
        }else{
            statusId= 1;
        }
        
        System.out.println(brandI+" "+categoryI);
        //String unitId = hConnection.sendGet("http://localhost/e-commerce/Back_end/max_karty_back_end/interface/insert_into.php", "?action=select&&columns=`brand_id`&&table=`brands`&&where=(`brand_name`='"+((String) brand.getSelectedItem())+"')");
        
         String table = "items" ;
        String updates ="`item_name`='"+productName.getText()+"',`sales_price`='"+price.getText()+"',`item_des`='"+description.getText()+"',`cat_id`='"+categoryI+"',`item_short_des`='"+shortDescription.getText()+"',`sub_cat_id`='"+((String) subCategory.getSelectedItem())+"',`unit_id`='"+((String) unit.getSelectedItem())+"',`brand_id`='"+brandI+"',`item_code`='"+barcode.getText()+"',`item_status`='"+statusId+"'";
        String conditions = "`item_name`='"+productName.getText()+"'";
        //System.out.println(data +"  "+columns);
        hConnection.sendGet("http://localhost/e-commerce/Back_end/max_karty_back_end/interface/CRUD.php", "?action=update&&where="+conditions+"&&table="+table+"&&updates="+updates);
              
               
              
           } catch (SQLException ex) {
               Logger.getLogger(ManageProducts.class.getName()).log(Level.SEVERE, null, ex);
           } catch (Exception ex) {
            Logger.getLogger(ManageProductsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void addProduct(){
        try {
        String entry = "INSERT INTO `product` (`name` , `price`, `description`, `stock`, `cost`,`product_category_name`,`minimum_stock`,`short_description`,`sub_category_name`,`unit_name`,`brand_name`,`barcode`,`status_name`) VALUES ('"+productName.getText()+"','"+price.getText()+"','"+description.getText()+"','0','0','"+category.getSelectedItem()+"','"+minimumStock.getText()+"','"+shortDescription.getText()+"','"+((String) subCategory.getSelectedItem())+"','"+((String) unit.getSelectedItem())+"','"+((String) brand.getSelectedItem())+"','"+barcode.getText()+"','"+((String) status.getSelectedItem())+"')";
        System.out.println(entry);
        database.statement.executeUpdate(entry);
        
        updateProductTable();
        
        // send data to online database
        HttpConnection hConnection = new HttpConnection();
        //select id numbers
        String brandI = hConnection.sendGet("http://localhost/e-commerce/Back_end/max_karty_back_end/interface/CRUD.php", "?action=select&&column=brand_id&&table=brands&&where=(`brand`='"+((String) brand.getSelectedItem())+"')");
        String categoryI = hConnection.sendGet("http://localhost/e-commerce/Back_end/max_karty_back_end/interface/CRUD.php", "?action=select&&column=cat_id&&table=category&&where=(`cat_name`='"+((String) category.getSelectedItem())+"')");
        
        //String unitId = hConnection.sendGet("http://localhost/e-commerce/Back_end/max_karty_back_end/interface/insert_into.php", "?action=select&&columns=`brand_id`&&table=`brands`&&where=(`brand_name`='"+((String) brand.getSelectedItem())+"')");
        int statusId;
        if (((String) status.getSelectedItem()).equals("disable")){
            statusId = 0;
        }else{
            statusId= 1;
        }
        
        String table = "items" ;
        String data ="('"+productName.getText()+"','"+price.getText()+"','"+description.getText()+"','0','"+categoryI+"','"+shortDescription.getText()+"','"+((String) subCategory.getSelectedItem())+"','"+((String) unit.getSelectedItem())+"','"+brandI+"','"+barcode.getText()+"','"+statusId+"')";
        String columns ="(`item_name`,`sales_price`,`item_des`,`stock`,`cat_id`,`item_short_des`,`sub_cat_id`,`unit_id`,`brand_id`,`item_code`,`item_status`)";
        //System.out.println(data +"  "+columns);
        hConnection.sendGet("http://localhost/e-commerce/Back_end/max_karty_back_end/interface/CRUD.php", "?action=add&&columns="+columns+"&&table="+table+"&&data="+data);
        
        } catch (SQLException e){
            e.printStackTrace();
        } catch (Exception ex) {
            Logger.getLogger(ManageProductsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void updateProductTable(){
        try {
        String query = "SELECT `name`,`price`, `product_category_name`,`description`,`stock`,`minimum_stock` FROM `product` " ;
        ResultSet rs = database.statement.executeQuery(query);
        
        DefaultTableModel tableModel = new DefaultTableModel();
        tableModel.addColumn("Product Name");
        tableModel.addColumn("Price");
        tableModel.addColumn("Category");
        tableModel.addColumn("Description");
        tableModel.addColumn("Stock");
        tableModel.addColumn("Min.Stock");
        
        while(rs.next()){
            Vector v = new Vector();
            v.add(rs.getString("name"));
            v.add(rs.getString("price"));
            v.add(rs.getString("product_category_name"));
            v.add(rs.getString("description"));
            v.add(rs.getInt("stock"));
            v.add(rs.getInt("minimum_stock"));
            tableModel.addRow(v);
        }
        
        productTable.setModel(tableModel);
        
        } catch (SQLException e){
            e.printStackTrace();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField barcode;
    public javax.swing.JComboBox brand;
    public javax.swing.JComboBox category;
    public javax.swing.JButton createBrand;
    public javax.swing.JButton createCategory;
    public javax.swing.JButton createSubCategory;
    public javax.swing.JButton createUnit;
    public javax.swing.JButton deductWaste;
    public javax.swing.JTextArea description;
    public javax.swing.JCheckBox editMode;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel4;
    public javax.swing.JLabel jLabel5;
    public javax.swing.JLabel jLabel6;
    public javax.swing.JLabel jLabel7;
    public javax.swing.JLabel jLabel8;
    public javax.swing.JPanel jPanel1;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JScrollPane jScrollPane3;
    public org.jdesktop.swingx.JXLabel jXLabel2;
    public org.jdesktop.swingx.JXLabel jXLabel3;
    public org.jdesktop.swingx.JXLabel jXLabel4;
    public javax.swing.JTextField minimumStock;
    public javax.swing.JTextField price;
    public javax.swing.JButton productAction;
    public javax.swing.JTextField productName;
    public org.jdesktop.swingx.JXTable productTable;
    public javax.swing.JTextArea shortDescription;
    public javax.swing.JComboBox status;
    public javax.swing.JComboBox subCategory;
    public javax.swing.JComboBox unit;
    // End of variables declaration//GEN-END:variables

    private void goToManageCategoriesAndBrands() {
        ManageCategories manageProducts = new ManageCategories();
            //this.setVisible(false);
            manageProducts.setVisible(true);
        
    }
}
